<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Lown Index – Simple Filters Demo</title>
  <style>
    :root {
      --bg: #0b1020;
      --panel: #121a33;
      --muted: #8ea0c7;
      --text: #e6ecff;
      --accent: #5aa7ff;
      --accent-2: #6ee7b7;
      --border: #243056;
      --pill-bg: #1b2547;
      --tag-bg: #101735;
      --grade-A: #16a34a;
      --grade-B: #22c55e;
      --grade-C: #eab308;
      --grade-D: #f97316;
      --grade-F: #ef4444;
    }
    * { box-sizing: border-box; }
    body {
      margin: 0; background: var(--bg); color: var(--text);
      font: 14px/1.45 system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, "Apple Color Emoji", "Segoe UI Emoji";
    }
    header {
      padding: 20px 16px; border-bottom: 1px solid var(--border);
      background: linear-gradient(180deg, rgba(90,167,255,0.12), transparent);
    }
    header h1 { margin: 0 0 6px; font-size: 20px; }
    header p { margin: 0; color: var(--muted); }

    .wrap { max-width: 1100px; margin: 0 auto; padding: 16px; }

    .controls {
      display: grid; gap: 12px; grid-template-columns: repeat(12, 1fr);
      background: var(--panel); border: 1px solid var(--border); border-radius: 14px;
      padding: 12px; align-items: end; position: sticky; top: 0; z-index: 2;
    }
    .controls .field { display: flex; flex-direction: column; gap: 6px; }
    label { color: var(--muted); font-size: 12px; }
    select, input[type="text"] {
      background: var(--pill-bg); color: var(--text); border: 1px solid var(--border);
      padding: 8px 10px; border-radius: 10px; outline: none;
    }
    .checks { display: flex; gap: 12px; flex-wrap: wrap; }
    .checks label { display: inline-flex; align-items: center; gap: 6px; }
    input[type="checkbox"] { width: 16px; height: 16px; }

    .actions { display: flex; gap: 10px; }
    button {
      appearance: none; border: 1px solid var(--border); background: var(--accent);
      color: #06132a; font-weight: 600; padding: 10px 14px; border-radius: 12px; cursor: pointer;
    }
    button.secondary { background: transparent; color: var(--text); }

    .summary { margin: 14px 2px; color: var(--muted); }

    table { width: 100%; border-collapse: collapse; background: var(--panel);
      border: 1px solid var(--border); border-radius: 14px; overflow: hidden; }
    thead th { text-align: left; font-weight: 600; color: var(--muted); font-size: 12px; padding: 10px; border-bottom: 1px solid var(--border); }
    tbody td { padding: 12px 10px; border-top: 1px solid rgba(36,48,86,.5); }
    tbody tr:hover { background: rgba(90,167,255,.08); }

    .pill { background: var(--pill-bg); border: 1px solid var(--border); padding: 3px 8px; border-radius: 999px; font-weight: 700; font-size: 12px; letter-spacing: .03em; }
    .tag { background: var(--tag-bg); border: 1px solid var(--border); padding: 3px 8px; border-radius: 8px; font-size: 12px; }
    .grade { font-weight: 800; letter-spacing: .04em; }
    .grade:where([data-g="A"]) { color: var(--grade-A); }
    .grade:where([data-g="B"]) { color: var(--grade-B); }
    .grade:where([data-g="C"]) { color: var(--grade-C); }
    .grade:where([data-g="D"]) { color: var(--grade-D); }
    .grade:where([data-g="F"]) { color: var(--grade-F); }

    .empty { text-align: center; color: var(--muted); padding: 24px; }

    @media (max-width: 900px){
      .controls { grid-template-columns: repeat(6, 1fr); }
    }
    @media (max-width: 640px){
      .controls { grid-template-columns: repeat(4, 1fr); }
    }
  </style>
</head>
<body>
  <header>
    <div class="wrap">
      <h1>Lown Index – Georgia Hospitals</h1>
      <p>Filter, sort, and browse a single-state slice of the Lown Institute dataset. (Falls back to a small sample if the JSON file isn't found.)</p>
    </div>
  </header>

  <main class="wrap">
    <section class="controls" role="region" aria-label="Filters">
      <div class="field" style="grid-column: span 2; min-width: 140px;">
        <label for="stateSelect">State</label>
        <select id="stateSelect">
          <option value="">All</option>
          <!-- options injected from data -->
        </select>
      </div>
      <div class="field" style="grid-column: span 2; min-width: 140px;">
        <label for="sizeSelect">Size</label>
        <select id="sizeSelect">
          <option value="">All</option>
          <option value="s">Small</option>
          <option value="m">Medium</option>
          <option value="l">Large</option>
        </select>
      </div>
      <div class="field" style="grid-column: span 2; min-width: 140px;">
        <label for="zipSearch">Zip (starts with)</label>
        <input id="zipSearch" type="text" inputmode="numeric" placeholder="e.g. 30 or 303" />
      </div>

      <div class="field" style="grid-column: span 6;">
        <label>Ownership / Safety-net</label>
        <div class="checks">
          <label><input id="forProfit" type="checkbox" /> For‑profit</label>
          <label><input id="nonProfit" type="checkbox" /> Non‑profit</label>
          <label><input id="safetyNet" type="checkbox" /> Safety‑net</label>
        </div>
      </div>

      <div class="field" style="grid-column: span 4;">
        <label>Location</label>
        <div class="checks">
          <label><input id="urban" type="checkbox" /> Urban</label>
          <label><input id="rural" type="checkbox" /> Rural</label>
        </div>
      </div>

      <div class="field" style="grid-column: span 3; min-width: 160px;">
        <label for="sortSelect">Sort by</label>
        <select id="sortSelect">
          <option value="">Name (A→Z)</option>
          <option value="zip">Zip (ascending)</option>
          <option value="grade_t1">Tier 1 Grade (best)</option>
          <option value="grade_px">Patient Experience Grade (best)</option>
          <option value="grade_outcome">Outcome Grade (best)</option>
        </select>
      </div>

      <div class="actions" style="grid-column: span 5; justify-content: flex-end;">
        <button id="applyBtn" title="Apply current selections and update the table">Apply</button>
        <button id="clearBtn" class="secondary" title="Clear filters and reset the view">Clear</button>
      </div>
    </section>

    <div id="summary" class="summary" aria-live="polite">Loading…</div>

    <div class="table-wrap">
      <table id="resultsTable">
        <thead>
          <tr>
            <th>Name</th>
            <th>City</th>
            <th>State</th>
            <th>Zip</th>
            <th>Size</th>
            <th>Ownership</th>
            <th>Locale</th>
            <th>Tier 1 (Composite)</th>
            <th>Patient Exp</th>
            <th>Outcome</th>
          </tr>
        </thead>
        <tbody>
          <!-- rows injected -->
        </tbody>
      </table>
      <div id="emptyState" class="empty" hidden>No results match your filters.</div>
    </div>
  </main>

  <script>
  // === The JavaScript you shared, with two tiny presentational tweaks: ===
  // 1) We expose an empty-state message when no rows match.
  // 2) We add data-g attributes to grade cells for color accents.
  (function () {
    const JSON_PATH = '2025_Lown_Index_GA.json';

    // Small fallback sample (used if JSON file not found)
    const FALLBACK = [
      { Name: 'Hamilton Medical Center', City: 'Dalton', State: 'GA', Zip: 30720, Size: 'l',
        TYPE_ForProfit: 0, TYPE_NonProfit: 1, TYPE_isSafetyNet: 0, TYPE_urban: 1, TYPE_rural: 0,
        TIER_1_GRADE_Lown_Composite: 'C', TIER_3_GRADE_Pat_Exp: 'B', TIER_2_GRADE_Outcome: 'B' },
      { Name: 'Upson Regional Medical Center', City: 'Thomaston', State: 'GA', Zip: 30286, Size: 's',
        TYPE_ForProfit: 0, TYPE_NonProfit: 1, TYPE_isSafetyNet: 0, TYPE_urban: 0, TYPE_rural: 1,
        TIER_1_GRADE_Lown_Composite: 'B', TIER_3_GRADE_Pat_Exp: 'A', TIER_2_GRADE_Outcome: 'C' },
      { Name: 'Northside Hospital Forsyth', City: 'Cumming', State: 'GA', Zip: 30041, Size: 'l',
        TYPE_ForProfit: 0, TYPE_NonProfit: 1, TYPE_isSafetyNet: 0, TYPE_urban: 1, TYPE_rural: 0,
        TIER_1_GRADE_Lown_Composite: 'B', TIER_3_GRADE_Pat_Exp: 'A', TIER_2_GRADE_Outcome: 'A' },
      { Name: 'Memorial Satilla Health', City: 'Waycross', State: 'GA', Zip: 31501, Size: 'm',
        TYPE_ForProfit: 1, TYPE_NonProfit: 0, TYPE_isSafetyNet: 1, TYPE_urban: 0, TYPE_rural: 1,
        TIER_1_GRADE_Lown_Composite: 'B', TIER_3_GRADE_Pat_Exp: 'B', TIER_2_GRADE_Outcome: 'C' }
    ];

    let DATA = [];

    // State we "stage" first; only applied when user clicks Apply
    const pending = {
      state: '', size: '', zipQuery: '',
      forProfit: false, nonProfit: false, safetyNet: false,
      urban: false, rural: false,
      sort: ''
    };

    const els = {};

    document.addEventListener('DOMContentLoaded', () => {
      // Cache DOM elements
      Object.assign(els, {
        stateSelect: document.getElementById('stateSelect'),
        sizeSelect: document.getElementById('sizeSelect'),
        zipSearch: document.getElementById('zipSearch'),
        forProfit: document.getElementById('forProfit'),
        nonProfit: document.getElementById('nonProfit'),
        safetyNet: document.getElementById('safetyNet'),
        urban: document.getElementById('urban'),
        rural: document.getElementById('rural'),
        sortSelect: document.getElementById('sortSelect'),
        applyBtn: document.getElementById('applyBtn'),
        clearBtn: document.getElementById('clearBtn'),
        summary: document.getElementById('summary'),
        tbody: document.querySelector('#resultsTable tbody'),
        empty: document.getElementById('emptyState')
      });

      loadData();

      // minor UX nicety: Enter key in zip field triggers Apply
      els.zipSearch?.addEventListener('keydown', (e)=>{
        if(e.key === 'Enter') els.applyBtn?.click();
      });
    });

    // -------------------- Data loading --------------------
    async function loadData(){
      try{
        const res = await fetch(JSON_PATH, { cache: 'no-store' });
        if(!res.ok) throw new Error('JSON not found');
        DATA = await res.json();
      }catch(err){
        console.warn('Using fallback sample due to:', err.message);
        DATA = FALLBACK;
      }
      initializeControls(DATA);
      render(DATA); // initial render
    }

    // -------------------- Controls wiring --------------------
    function initializeControls(data){
      // Populate state dropdown from data
      const states = Array.from(new Set(data.map(r => r.State))).filter(Boolean).sort();
      if(els.stateSelect){
        // Keep existing <option value="">All</option>
        for(const s of states){
          const opt = document.createElement('option');
          opt.value = s; opt.textContent = s; els.stateSelect.appendChild(opt);
        }
        els.stateSelect.addEventListener('change', e => pending.state = e.target.value);
      }

      if(els.sizeSelect) els.sizeSelect.addEventListener('change', e => pending.size = e.target.value);
      if(els.zipSearch) els.zipSearch.addEventListener('input', e => pending.zipQuery = e.target.value.trim());
      if(els.forProfit) els.forProfit.addEventListener('change', e => pending.forProfit = e.target.checked);
      if(els.nonProfit) els.nonProfit.addEventListener('change', e => pending.nonProfit = e.target.checked);
      if(els.safetyNet) els.safetyNet.addEventListener('change', e => pending.safetyNet = e.target.checked);
      if(els.urban) els.urban.addEventListener('change', e => pending.urban = e.target.checked);
      if(els.rural) els.rural.addEventListener('change', e => pending.rural = e.target.checked);
      if(els.sortSelect) els.sortSelect.addEventListener('change', e => pending.sort = e.target.value);

      if(els.applyBtn) els.applyBtn.addEventListener('click', onApply);
      if(els.clearBtn) els.clearBtn.addEventListener('click', onClear);
    }

    function onApply(){
      const filtered = applyFilters(DATA, pending);
      const sorted = applySort(filtered, pending.sort);
      render(sorted, pending);
    }

    function onClear(){
      // reset staged filters
      pending.state = pending.size = pending.zipQuery = pending.sort = '';
      pending.forProfit = pending.nonProfit = pending.safetyNet = false;
      pending.urban = pending.rural = false;

      // reset controls
      if(els.stateSelect) els.stateSelect.value = '';
      if(els.sizeSelect) els.sizeSelect.value = '';
      if(els.zipSearch) els.zipSearch.value = '';
      if(els.forProfit) els.forProfit.checked = false;
      if(els.nonProfit) els.nonProfit.checked = false;
      if(els.safetyNet) els.safetyNet.checked = false;
      if(els.urban) els.urban.checked = false;
      if(els.rural) els.rural.checked = false;
      if(els.sortSelect) els.sortSelect.value = '';

      render(DATA);
    }

    // -------------------- Filtering & sorting --------------------
    const gradeOrder = g => ({ A:4, B:3, C:2, D:1, F:0 }[g] ?? -1);

    function matchesZip(item, query){
      if(!query) return true;
      const z = String(item.Zip ?? '').trim();
      return z === query || z.startsWith(query);
    }

    function applyFilters(rows, sel){
      return rows.filter(r => {
        if(sel.state && r.State !== sel.state) return false;
        if(sel.size && String(r.Size).toLowerCase() !== sel.size) return false;
        if(!matchesZip(r, sel.zipQuery)) return false;

        // Ownership OR-logic within group
        if([sel.forProfit, sel.nonProfit, sel.safetyNet].some(Boolean)){
          const conds = [];
          if(sel.forProfit) conds.push(r.TYPE_ForProfit == 1);
          if(sel.nonProfit) conds.push(r.TYPE_NonProfit == 1);
          if(sel.safetyNet) conds.push(r.TYPE_isSafetyNet == 1);
          if(!conds.some(Boolean)) return false;
        }

        // Urban/Rural OR-logic within group
        if([sel.urban, sel.rural].some(Boolean)){
          const conds = [];
          if(sel.urban) conds.push(r.TYPE_urban == 1);
          if(sel.rural) conds.push(r.TYPE_rural == 1);
          if(!conds.some(Boolean)) return false;
        }

        return true;
      });
    }

    function applySort(rows, sortKey){
      const out = [...rows];
      switch(sortKey){
        case 'zip':
          out.sort((a,b)=> (a.Zip ?? 0) - (b.Zip ?? 0));
          break;
        case 'grade_t1':
          out.sort((a,b)=> gradeOrder(b.TIER_1_GRADE_Lown_Composite) - gradeOrder(a.TIER_1_GRADE_Lown_Composite) || a.Name.localeCompare(b.Name));
          break;
        case 'grade_px':
          out.sort((a,b)=> gradeOrder(b.TIER_3_GRADE_Pat_Exp) - gradeOrder(a.TIER_3_GRADE_Pat_Exp) || a.Name.localeCompare(b.Name));
          break;
        case 'grade_outcome':
          out.sort((a,b)=> gradeOrder(b.TIER_2_GRADE_Outcome) - gradeOrder(a.TIER_2_GRADE_Outcome) || a.Name.localeCompare(b.Name));
          break;
        default:
          out.sort((a,b)=> a.Name.localeCompare(b.Name));
      }
      return out;
    }

    // -------------------- Render --------------------
    function render(rows, sel){
      if(!els.tbody) return;

      els.tbody.innerHTML = '';
      const frag = document.createDocumentFragment();

      for(const r of rows){
        const tr = document.createElement('tr');
        const g1 = r.TIER_1_GRADE_Lown_Composite ?? '';
        const g2 = r.TIER_3_GRADE_Pat_Exp ?? '';
        const g3 = r.TIER_2_GRADE_Outcome ?? '';
        tr.innerHTML = `
          <td><strong>${r.Name ?? ''}</strong></td>
          <td>${r.City ?? ''}</td>
          <td>${r.State ?? ''}</td>
          <td><span class="tag">${r.Zip ?? ''}</span></td>
          <td><span class="pill">${(r.Size ?? '').toUpperCase()}</span></td>
          <td>${ownershipLabel(r)}</td>
          <td>${r.TYPE_urban==1? 'Urban' : r.TYPE_rural==1? 'Rural' : ''}</td>
          <td class="grade" data-g="${g1}">${g1}</td>
          <td class="grade" data-g="${g2}">${g2}</td>
          <td class="grade" data-g="${g3}">${g3}</td>
        `;
        frag.appendChild(tr);
      }

      els.tbody.appendChild(frag);

      // empty state visibility
      if(els.empty){ els.empty.hidden = rows.length !== 0; }

      if(els.summary){
        const parts = [];
        if(sel){
          if(sel.state) parts.push(`State: ${sel.state}`);
          if(sel.size) parts.push(`Size: ${sel.size.toUpperCase()}`);
          if(sel.zipQuery) parts.push(`Zip: "${sel.zipQuery}"`);
          if([sel.forProfit,sel.nonProfit,sel.safetyNet].some(Boolean)){
            const owns = [];
            if(sel.forProfit) owns.push('For-profit');
            if(sel.nonProfit) owns.push('Non-profit');
            if(sel.safetyNet) owns.push('Safety-net');
            parts.push(`Ownership: ${owns.join(', ')}`);
          }
          if([sel.urban,sel.rural].some(Boolean)){
            const locs = [];
            if(sel.urban) locs.push('Urban');
            if(sel.rural) locs.push('Rural');
            parts.push(`Location: ${locs.join(', ')}`);
          }
          if(sel.sort){
            const m = {zip:'Zip',grade_t1:'Tier 1 Grade',grade_px:'Patient Exp Grade',grade_outcome:'Outcome Grade'};
            parts.push(`Sorted by: ${m[sel.sort]||'Name'}`);
          }
        }
        els.summary.textContent = `${rows.length} result(s)` + (parts.length? ` • ${parts.join(' • ')}` : '');
      }
    }

    function ownershipLabel(r){
      if(r.TYPE_ForProfit==1) return 'For-profit';
      if(r.TYPE_NonProfit==1) return 'Non-profit';
      return '';
    }

    // Expose for debugging in console if needed
    window.LownDemo = { applyFilters, applySort, render };
  })();
  </script>
</body>
</html>

